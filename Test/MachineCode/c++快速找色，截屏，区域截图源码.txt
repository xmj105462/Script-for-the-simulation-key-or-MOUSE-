HBITMAP CopyScreenToBitmap(LPRECT lpRect) {//参数1：矩形RECT的指针即要截图的区域
	HDC       hScrDC, hMemDC;
	// 屏幕和内存设备描述表
	HBITMAP    hBitmap, hOldBitmap;
	// 位图句柄
	int       nX, nY, nX2, nY2;
	// 选定区域坐标
	int       nWidth, nHeight;
	// 确保选定区域不为空矩形
	if (IsRectEmpty(lpRect))
		return NULL;
	//为屏幕创建设备描述表
	hScrDC = CreateDC(_T("DISPLAY"), NULL, NULL, NULL);
	//为屏幕设备描述表创建兼容的内存设备描述表
	hMemDC = CreateCompatibleDC(hScrDC);
	// 获得选定区域坐标
	nX = lpRect->left;
	nY = lpRect->top;
	nX2 = lpRect->right;
	nY2 = lpRect->bottom;
	//确保选定区域是可见的
	if (nX < 0)
		nX = 0;
	if (nY < 0)
		nY = 0;
	if (nX2 > m_xScreen)
		nX2 = m_xScreen;
	if (nY2 > m_yScreen)
		nY2 = m_yScreen;
	nWidth = nX2 - nX;
	nHeight = nY2 - nY;
	// 创建一个与屏幕设备描述表兼容的位图
	hBitmap = CreateCompatibleBitmap
	(hScrDC, nWidth, nHeight);
	// 把新位图选到内存设备描述表中
	hOldBitmap = (HBITMAP)SelectObject(hMemDC, hBitmap);
	// 把屏幕设备描述表拷贝到内存设备描述表中	
		BitBlt(hMemDC, 0, 0, nWidth, nHeight,//截取选中区域
			hScrDC, nX, nY, SRCCOPY);	
	hBitmap = (HBITMAP)SelectObject(hMemDC, hOldBitmap);//得到屏幕位图的句柄	
	//清除 
	DeleteDC(hScrDC);
	DeleteDC(hMemDC); 	
	return hBitmap;
}
		int m_xScreen = GetSystemMetrics(SM_CXSCREEN);
		int  m_yScreen = GetSystemMetrics(SM_CYSCREEN);
		float right = (float)m_xScreen;float bottom = (float)m_yScreen;
		//屏幕分组，5像素一组
		float rightScale = right/ GROUP_PIXEL;
		float bottomScale = bottom/ GROUP_PIXEL;
		//开始游戏范围宽高300-110
		float startGameX1 = 166 / rightScale*right- 2*GROUP_PIXEL;//开始游戏坐标范围第一点往左上偏移10像素扩大范围
		float startGameY1 = 186 / bottomScale * bottom - 2 * GROUP_PIXEL;
		//开始游戏坐标范围第2点(这点不会被计算颜色，因为长度是startGameX2-startGameX1=300,所以只有从startGameX1-第299个点有计算)
		float startGameX2 = 222 / rightScale * right + 2 * GROUP_PIXEL;
		float startGameY2 = 204 / bottomScale * bottom + 2 * GROUP_PIXEL;
		int maxX= (int)startGameX2; 
		int maxY= (int)startGameY2;
		int findX= (int)startGameX1; int findY= (int)startGameY1;
		int confirm = 0;
		RECT loginRect;
		loginRect.left = findX; loginRect.top = findY;
		loginRect.right = maxX; loginRect.bottom = maxY;
		LPRECT loginRectPtr = &loginRect;
		HBITMAP loginHBitmap = CopyScreenToBitmap(loginRectPtr);//获取选中区域位图
		/*CImage loginImage; loginImage.Attach(loginHBitmap);
		loginImage.Detach(); */
		//根据句柄加载位图进缓存
		CBitmap bmp;
		bmp.Attach(loginHBitmap);//绑定位图
		BITMAP BitMap;
		bmp.GetBitmap(&BitMap);//得到位图数据
		int byteCount = BitMap.bmWidthBytes * BitMap.bmHeight;//位图占用字节数
		char* pBits = new char[byteCount];//开辟数组保存位图数据
//一般图片32位，8+8+8+8前3个字节存放RGB颜色第四个字节存放透明度		
		if (pBits)bmp.GetBitmapBits(byteCount, pBits);//存储顺序BGR透明度-1 ，		
		size_t colorIndex=0;
//需要找色的区域
		while (findY< maxY) {//
			while (findX< maxX) {//
				//COLORREF color = loginImage.GetPixel(findX, findY);
				BYTE blue = pBits[colorIndex];
				BYTE green = pBits[++colorIndex];
				BYTE red = pBits[++colorIndex];				
				if (0==confirm) {
					if (red == 250 && 223 == green && 1 == blue) {//第一个点
						++confirm;//标记找色数量					
					}
				}
				else {
					if (red == 200 && 151 == green && 5 == blue) {//第2个点
						++confirm;
						CString str1;
						str1.Format("找到x:%d,y:%d,red:%d,green:%d,blue:%d", findX, findY, red, green,blue);
						MessageBox(_T(str1));
						//chilk(findX, findY);
						break;
					}					
				}				
				++findX; colorIndex+=2;
			}//Sleep(20);
			if (confirm == 2)break;
			++findY; findX = (int)startGameX1;
		}
		if (confirm != 2)AfxMessageBox("没有找到");	
		DeleteObject(loginHBitmap);
	